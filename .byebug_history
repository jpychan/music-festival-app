exit
next
dist_km
next
dist_km
next
dist_km
next
f
next
dist_km
next
d
f
next
f
next
dist_km <= 500
find_artist
next
f.genres.include?(Genre.find_by(name: params[:genre]))
f.genres.include?(2)
f.genres.include?(params[:genre])
params[:genre]
f.genres.include?(parms[:genre])
f.genres.include?(parms[:genres])
f.genres
find_genre
next
params[:genre]
params[:genre]]
dist_km
next
d
next
festivals.count
festivals
f
exit
festivals.count
festivals
params[:location]
f
exit
eit
ext
festival
Festival.find_by(name: festival)
next
step
stpe
params[:festival]
festival
continue
@first_five_results
continue
response
continue
quit
ENV['AIRPORT_API_USERKEY']
response
continue
CONTINUE
arrival_airport
next
inbound_date
continue
next
continue
query
params
quit
continue
params
quit
params
continue
next
@first_five_results.class
@first_five_results.length
@first_five_results
next
j
@first_five_results.length - 1
continue
j
continue
next
@first_five_results
data["Itineraries"].length
@first_five_results.length
@first_five_results
j
continue
next
j
continue
next
 outbound_leg_id = @first_five_results[j]["OutboundLegId"]
@first_five_results[j]["OutboundLegId"]
@first_five_results[j]
continue
outbound_leg_id
next
continue
next
@first_five_results.length
next
j
next
continue
next
continue
i
next
i
next
continue
next
@first_five_results
@first_five_resuts
@first-five_results
next
continue
next
continue
@results
@resuls
next
@first_five_results[0]
@first_five_results
next
continue
@results
next
legs
next
continue
next
@data.length
next
response
respose
continue
arrival_airport
response.body
response
continue
data
continue
next
continue
next
@polling_url
continue
next
continue
next
response
continue
next
continue
@results
next
@data
next
continue
legs
next
response
quit
arrival_airport["airports"][0]["code"]
arrival_airport["airports"]["code"]
arrival_airport["airports"]
arrival_airport
next
continue
response.gsub!(/\);$/, '')
esponse.gsub!(/\);$/, '')
response
continue
next
response
next
quit
response = response.body
JSON.parse(response.body)
response.body
response
next
response
next
url
next
long
lat
continue
lat.to_s
lat
continue
quit
date
continue
quit
next
continue
quit
test = date[1].match(/^[a-zA-Z]/) 
test.nil?
test.true?
test = date[1].match(/^[a-zA-Z]/) 
date[1][0]
date[1].starts_with?(%r/^[a-zA-Z]/) 
date[1].starts_with?('%r/^[a-zA-Z]/') 
date[1].starts_with?(%r/^[a-zA-Z]/) 
date[1] =~ %r/^[a-zA-Z]/
date[1].match(/^[a-zA-Z]/) 
date[1]
if date[1].match(/^[a-zA-Z]/) 
date[1].match(/^[a-zA-Z]/) 
date[1].start_with?('/\w/')
date[1].start_with?(/\w/)
date[1].start_with?('/\w/')
date[1].start_with?('\w')
date
next
festival.id
quit
continue
quit
nextquit
month
next
date
next
quit
clear
      date = date[1].split(/,|./)
date
quit
date
 date = date[1].split(/,|./)
month
next
quit
next
      date = date[1].split(/,|./)
quit
      date = date[1].split(',|.')
quit
      date = date[1].split('/,|./')
next
quit
      date = date.split('/,|./')
      date = date[1].split('/,|./')
date
