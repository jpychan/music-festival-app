continue
next
params[:default]
@params[:default]
@festival
quit
params
continue
data
params
continue
paramscontinue
params
continue
params
continue
data
params
query
params
continue
next
@first_five_results
next
@results
next
response
next
continue
@first_five_results[0][:departure_airport]["Name"]
Date.parse(@first_five_results[5]["OutboundDate"])
puts "#{@first_five_results[5]["OutboundDate"]}"
@first_five_results[5]["OutboundDate"]
@first_five_results[5]
@first_five_results[0][:outbound_arrival_time] = @first_five_results[0][:outbound_arrival_time].strftime('%I:%M %p')
      @first_five_results[0][:outbound_arrival_time] = DateTime.parse(@first_five_results[0][:outbound_leg]["Arrival"])
      @first_five_results[j][:outbound_arrival_time] = DateTime.parse(@first_five_results[j][:outbound_leg]["Arrival"])
d.strftime('%I:%M %p')
d.strftime('%I:%M:%S')
d.strftime('%I:%M:%S %p')
d.hour
d = DateTime.parse(@first_five_results[0][:outbound_leg]["Departure"])
d.hour
d = Date.parse(@first_five_results[0][:outbound_leg]["Departure"])
@first_five_results[0][:outbound_leg]["Departure"].class
@first_five_results[0][:outbound_leg]["Departure"].strftime("%H:%M")
DateTime.now.strftime("%H:%M")
@first_five_results[0][:outbound_leg]["Duration"]
@first_five_results[0][:outbound_leg]
@first_five_results[0][:departure_carrier]
@first_five_results[0]["PricingOptions"][0]["DeeplinkUrl"]
@first_five_results[0][:outbound_leg]
@first_five_results[0]["PricingOptions"][0]["Price"]
@first_five_results[0]["PricingOptions"]
@first_five_results[0]["PricingOptions"]["Price"].to_s
@first_five_results[0]["PricingOptions"]["Price"].to_i
@first_five_results[0]["PricingOptions"]["Price"]
@first_five_results[0][:departure_airport]["Name"]
@first_five_results[0][:departure_airport]
@first_five_result[0][:departure_airport]
@first_five_result[:departure_airport]
@first_five_result[0][:departure_airport]
@first_five_results[0..4]
@first_five_results
continue
@first_five_results << query
query
data["Query"]
data["query"]
continue
response.body
response
next
continue
response.body
response
next
response
continue
@festival.artists.count
@festival.artists
@festival
continue
response
next
continue
festival.longitude
festival.latitude
response.body
response
next
continue
quit
next
continue
festival
params
next
arrival_airport
next
arrival_airport
next
outbound_date
next
festival
next
festival
exit
festivals
festival
exit
festivals
exit
festivals
exit
festivals
exit
festivals
exit
params[:artist]
params[:artist
params[:camping]
festivals
exit
festivals
exit
Artist.where('name LIKE ?', '%3 doors down%').first.festivals
Artist.where('name LIKE ?', '%3 doors down%')
Artist.where('name LIKE ?', '%3 doors down%').firstfestivals
Artist.where('name LIKE ?', '%3 doors down%').festivals
festivals
next
festivals
exit
festivals.first.artists
festivals.first.genres
festivals
exit
quit
DistanceService.new(params[:location], Festival.find(182)).calc_distance
DistanceService.new(params[:location], Festival.find(128)).calc_distance
festivals
DistanceService.new(params[:location], Festival.find(414)).calc_distance
Festival.where('location LIKE ?', '%London%')
Festival.wFestival.joins("inner join performances as p on p.festival_id = festivals.id inner join artists as a on p.artist_id = a.id inner join festival_genres as fg on fg.festival_id = festivals.id inner join genres as g on fg.genre_id = g.id where festivals.start_date >= '2016-03-23' and lower(festivals.camping) like '%yes%' and lower(g.name) like '%indie%' and a.name like '%'").first
DistanceService.new(params[:location], festivals[28]).calc_distance
DistanceService.new(params[:location], festivals[2]).calc_distance
DistanceService.new(params[:location], festivals.[2]).calc_distance
DistanceService.new(params[:location], festivals.first).calc_distance
DistanceService.new(params[:location], festivals.first)
dist_km
quit
festivals.select { |f| d = DistanceService.new(params[:location], f) dist = d.calc_distance dist <= 500 }
festivals.select do |f|
params[:location]
next
festivals.count
quit
Festival.count
festivals.count
festivals
exit
next
dist_km
next
dist_km
next
dist_km
next
f
next
dist_km
next
d
f
next
f
next
dist_km <= 500
find_artist
next
f.genres.include?(Genre.find_by(name: params[:genre]))
f.genres.include?(2)
f.genres.include?(params[:genre])
params[:genre]
f.genres.include?(parms[:genre])
f.genres.include?(parms[:genres])
f.genres
find_genre
next
params[:genre]
params[:genre]]
dist_km
next
d
next
festivals.count
festivals
f
exit
festivals.count
festivals
params[:location]
f
exit
eit
ext
festival
Festival.find_by(name: festival)
next
step
stpe
params[:festival]
festival
continue
@first_five_results
continue
response
continue
quit
ENV['AIRPORT_API_USERKEY']
response
continue
CONTINUE
arrival_airport
next
inbound_date
continue
next
continue
query
params
quit
continue
params
quit
params
continue
next
@first_five_results.class
@first_five_results.length
@first_five_results
next
j
@first_five_results.length - 1
continue
j
continue
next
@first_five_results
data["Itineraries"].length
@first_five_results.length
@first_five_results
j
continue
next
